FROM registry.access.redhat.com/ubi9/ubi:latest@sha256:836460d59c1fd64297328bae646cd7f56dcebc039fdbb8d14112597895f08d07 as builder

USER root

RUN dnf install -y -q \
  which \
  patch \
  gcc \
  clang \
  cmake \
  make \
  openssl \
  ca-certificates \
  unzip \
  git \
  findutils \
  python3
  
RUN arch=$(uname -m) && \
  if [ "$arch" = "ppc64le" ]; then \
    echo "Setting up for ppc64le..." && \
    dnf install -y -q java-11-openjdk-devel wget; \
  fi


# Set environment for Bazel and Java
ENV JAVA_HOME=/usr/lib/jvm/java-11
ENV PATH=$JAVA_HOME/bin:$PATH
ENV BAZEL_VERSION=5.3.0
ENV BAZEL_JOBS=8

WORKDIR /

RUN arch=$(uname -m) && \
  if [ "$arch" = "ppc64le" ]; then \
    echo "Setting up for ppc64le..." && \
    wget https://ftp2.osuosl.org/pub/ppc64el/bazel/el8/bazel-${BAZEL_VERSION} && \
    chmod +x bazel-${BAZEL_VERSION} && \
    mv bazel-${BAZEL_VERSION} /usr/local/bin/bazel && \
    ln -s /usr/local/bin/bazel /usr/bin/bazel && \
    bazel --version; \
  else \
    echo "Setting up for non-ppc64le..." && \
    mkdir /bazel && \
    cd /bazel && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \
    chmod +x bazel-*.sh && \
    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    cd / && \
    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh; \
  fi


COPY . /mlmd-src
WORKDIR /mlmd-src

# "-std=c++17" is needed in order to build with ZetaSQL.
RUN bazel build -c opt --action_env=PATH \
  --define=grpc_no_ares=true \
  --jobs=${BAZEL_JOBS} \
  //ml_metadata/metadata_store:metadata_store_server \
  --cxxopt="-std=c++17" --host_cxxopt="-std=c++17" \
  --verbose_failures

# copying libmysqlclient source onto THIRD_PARTY folder.
RUN mkdir -p /mlmd-src/third_party
RUN cp -RL /mlmd-src/bazel-mlmd-src/external/libmysqlclient /mlmd-src/third_party/mariadb-connector-c

FROM registry.access.redhat.com/ubi9/ubi-minimal@sha256:e6b39b0a2cd88c0d904552eee0dca461bc74fe86fda3648ca4f8150913c79d0f

COPY --from=builder /mlmd-src/bazel-bin/ml_metadata/metadata_store/metadata_store_server /bin/metadata_store_server
COPY --from=builder /mlmd-src/third_party /mlmd-src/third_party

ENV GRPC_PORT "8080"
ENV METADATA_STORE_SERVER_CONFIG_FILE ""

# Introduces tzdata package here to avoid LoadTimeZone check failed error in the metadata store server.
# https://access.redhat.com/solutions/5616681
RUN microdnf update tzdata -y && \
    microdnf reinstall tzdata -y

ENTRYPOINT \
  "/bin/metadata_store_server" \
  "--grpc_port=${GRPC_PORT}" \
  "--metadata_store_server_config_file=${METADATA_STORE_SERVER_CONFIG_FILE}"

LABEL com.redhat.component="odh-mlmd-grpc-server" \
    name="odh-mlmd-grpc-server-rhel9" \
    description="odh-mlmd-grpc-server" \
    summary="odh-mlmd-grpc-server" \
    io.openshift.expose-services="8080" \
    io.openshift.tags="odh-mlmd-grpc-server" \
    io.k8s.display-name="odh-mlmd-grpc-server" \
    io.k8s.description="odh-mlmd-grpc-server"
